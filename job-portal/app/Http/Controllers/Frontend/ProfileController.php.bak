<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use App\Models\CandidateProfile;
use App\Models\OrganizationProfile;

class ProfileController extends Controller
{
    /**
     * Show the user profile edit form based on active role.
     *
     * @return \Illuminate\View\View|\Illuminate\Http\RedirectResponse
     */
    public function show()
    {
        $user = Auth::user();
        $activeRole = $user->active_role;
        
        if ($activeRole === 'Candidate') {
            // View candidate profileinate\Support\Str;
use App\Models\CandidateProfile;
use App\Models\OrganizationProfile;

class ProfileController extends Controller
{
    /**
     * Show the user profile edit form based on active role.
     *
     * @return \Illuminate\View\View|\Illuminate\Http\RedirectResponse
     */
    public function edit()
    {
        $user = Auth::user();
        $activeRole = $user->active_role;
        
        if ($activeRole === 'Candidate') {
            // Ensure candidate profile exists
            $profile = $user->candidateProfile ?? new CandidateProfile(['user_id' => $user->id]);
            return view('profile.candidate.edit', ['profile' => $profile]);
        } elseif ($activeRole === 'Organization') {
            // Ensure organization profile exists
            $profile = $user->organizationProfile ?? new OrganizationProfile(['user_id' => $user->id]);
            return view('profile.organization.edit', ['profile' => $profile]);
        } else {
            return redirect()->route('dashboard')
                ->with('error', 'Please select a role before editing your profile.');
        }
    }

    /**
     * Update the candidate profile.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateCandidateProfile(Request $request)
    {
        $user = Auth::user();
        
        // Validate request data
        $validated = $request->validate([
            'headline' => 'nullable|string|max:100',
            'bio' => 'nullable|string|max:1000',
            'location' => 'nullable|string|max:100',
            'phone' => 'nullable|string|max:20',
            'skills' => 'nullable|string|max:500',
            'experience' => 'nullable|string|max:2000',
            'education' => 'nullable|string|max:2000',
            'website' => 'nullable|url|max:255',
            'linkedin' => 'nullable|url|max:255',
            'profile_photo' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
            'resume' => 'nullable|file|mimes:pdf,doc,docx|max:5120',
        ]);
        
        // Get or create candidate profile
        $profile = $user->candidateProfile ?? new CandidateProfile(['user_id' => $user->id]);
        
        // Update profile fields
        $profile->headline = $validated['headline'] ?? $profile->headline;
        $profile->bio = $validated['bio'] ?? $profile->bio;
        
        // Handle location field (address in the database until migration runs)
        if (isset($validated['location'])) {
            if (Schema::hasColumn('candidate_profiles', 'location')) {
                $profile->location = $validated['location'];
            } else {
                $profile->address = $validated['location']; 
            }
        }
        
        $profile->phone = $validated['phone'] ?? $profile->phone;
        $profile->skills = $validated['skills'] ?? $profile->skills;
        $profile->experience = $validated['experience'] ?? $profile->experience;
        $profile->education = $validated['education'] ?? $profile->education;
        $profile->website = $validated['website'] ?? $profile->website ?? null;
        $profile->linkedin = $validated['linkedin'] ?? $profile->linkedin ?? null;
        
        // Handle profile photo upload
        if ($request->hasFile('profile_photo')) {
            // Delete old photo if exists
            if ($user->profile_photo) {
                Storage::delete($user->profile_photo);
            }
            
            $photo = $request->file('profile_photo');
            $path = $photo->store('profile-photos', 'public');
            $user->profile_photo = $path;
            $user->save();
        }
        
        // Handle resume upload
        if ($request->hasFile('resume')) {
            // Delete old resume if exists
            if ($profile->resume) {
                Storage::delete($profile->resume);
            } else if ($profile->resume_path) {
                Storage::delete($profile->resume_path);
            }
            
            $resume = $request->file('resume');
            $path = $resume->store('resumes', 'public');
            
            // Store path in both fields for backward compatibility
            $profile->resume = $path;
            $profile->resume_path = $path;
        }
        
        // Check if profile is complete
        $requiredFields = ['headline', 'bio', 'location', 'phone', 'skills', 'resume'];
        $isComplete = true;
        
        foreach ($requiredFields as $field) {
            if (empty($profile->$field)) {
                $isComplete = false;
                break;
            }
        }
        
        $profile->is_complete = $isComplete;
        $profile->save();
        
        return redirect()->back()->with('success', 'Your profile has been updated successfully.');
    }

    /**
     * Update the organization profile.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateOrganizationProfile(Request $request)
    {
        $user = Auth::user();
        
        // Validate request data
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'industry' => 'nullable|string|max:100',
            'description' => 'nullable|string|max:2000',
            'location' => 'nullable|string|max:100',
            'website' => 'nullable|url|max:255',
            'email' => 'nullable|email|max:255',
            'phone' => 'nullable|string|max:20',
            'founded_year' => 'nullable|integer|min:1900|max:' . date('Y'),
            'company_size' => 'nullable|string|max:50',
            'logo' => 'nullable|image|mimes:jpeg,png,jpg|max:2048',
        ]);
        
        // Get or create organization profile
        $profile = $user->organizationProfile ?? new OrganizationProfile(['user_id' => $user->id]);
        
        // Update profile fields
        $profile->name = $validated['name'];
        $profile->industry = $validated['industry'] ?? $profile->industry;
        $profile->description = $validated['description'] ?? $profile->description;
        $profile->location = $validated['location'] ?? $profile->location;
        $profile->website = $validated['website'] ?? $profile->website;
        $profile->email = $validated['email'] ?? $profile->email;
        $profile->phone = $validated['phone'] ?? $profile->phone;
        $profile->founded_year = $validated['founded_year'] ?? $profile->founded_year;
        $profile->company_size = $validated['company_size'] ?? $profile->company_size;
        
        // Handle logo upload
        if ($request->hasFile('logo')) {
            // Delete old logo if exists
            if ($profile->logo) {
                Storage::delete($profile->logo);
            }
            
            $logo = $request->file('logo');
            $path = $logo->store('organization-logos', 'public');
            $profile->logo = $path;
        }
        
        // Check if profile is complete
        $requiredFields = ['name', 'industry', 'description', 'location'];
        $isComplete = true;
        
        foreach ($requiredFields as $field) {
            if (empty($profile->$field)) {
                $isComplete = false;
                break;
            }
        }
        
        $profile->is_complete = $isComplete;
        $profile->save();
        
        return redirect()->back()->with('success', 'Your organization profile has been updated successfully.');
    }

    /**
     * Display the candidate profile.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function viewCandidateProfile($id)
    {
        $profile = CandidateProfile::with('user')->findOrFail($id);
        return view('profile.candidate.view', ['profile' => $profile]);
    }

    /**
     * Display the organization profile.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function viewOrganizationProfile($id)
    {
        $profile = OrganizationProfile::with(['user', 'jobs' => function($query) {
            $query->where('status', 'open')->orderBy('created_at', 'desc')->take(5);
        }])->findOrFail($id);
        
        return view('profile.organization.view', ['profile' => $profile]);
    }

    /**
     * Display the user's profile based on active role.
     *
     * @return \Illuminate\View\View
     */
    public function show()
    {
        $user = Auth::user();
        $activeRole = $user->active_role;
        
        if ($activeRole === 'Candidate') {
            // View candidate profile
            $profile = $user->candidateProfile;
            return view('profile.candidate.show', [
                'profile' => $profile,
                'user' => $user
            ]);
        } elseif ($activeRole === 'Organization') {
            // View organization profile
            $profile = $user->organizationProfile;
            $recentJobs = $profile->jobs()
                                ->where('status', 'open')
                                ->orderBy('created_at', 'desc')
                                ->take(5)
                                ->get();
            
            return view('profile.organization.show', [
                'profile' => $profile,
                'user' => $user,
                'recentJobs' => $recentJobs
            ]);
        } else {
            return redirect()->route('dashboard')
                ->with('error', 'Please select a valid role to view your profile.');
        }
    }
}
